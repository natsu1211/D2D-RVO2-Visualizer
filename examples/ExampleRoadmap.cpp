/*
 * ExampleRoadmap.cpp
 * RVO2 Library
 *
 * Copyright (c) 2008-2010 University of North Carolina at Chapel Hill.
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for educational, research, and non-profit purposes, without
 * fee, and without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph, and the following four paragraphs
 * appear in all copies.
 *
 * Permission to incorporate this software into commercial products may be
 * obtained by contacting the Office of Technology Development at the University
 * of North Carolina at Chapel Hill <otd@unc.edu>.
 *
 * This software program and documentation are copyrighted by the University of
 * North Carolina at Chapel Hill. The software program and documentation are
 * supplied "as is," without any accompanying services from the University of
 * North Carolina at Chapel Hill or the authors. The University of North
 * Carolina at Chapel Hill and the authors do not warrant that the operation of
 * the program will be uninterrupted or error-free. The end-user understands
 * that the program was developed for research purposes and is advised not to
 * rely exclusively on the program for any reason.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL OR THE
 * AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS
 * SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY OF NORTH CAROLINA AT
 * CHAPEL HILL OR THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL AND THE AUTHORS SPECIFICALLY
 * DISCLAIM ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AND ANY
 * STATUTORY WARRANTY OF NON-INFRINGEMENT. THE SOFTWARE PROVIDED HEREUNDER IS ON
 * AN "AS IS" BASIS, AND THE UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL AND THE
 * AUTHORS HAVE NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 *
 * Please send all bug reports to <geom@cs.unc.edu>.
 *
 * The authors may be contacted via:
 *
 * Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
 * Dept. of Computer Science
 * 201 S. Columbia St.
 * Frederick P. Brooks, Jr. Computer Science Bldg.
 * Chapel Hill, N.C. 27599-3175
 * United States of America
 *
 * <http://gamma.cs.unc.edu/RVO2/>
 */

/*-----------------------------------------------------------------------------
* modified by long
* 2014.06
* Example file showing a demo with 100 agents split in four groups initially
* positioned in four corners of the environment. Each agent attempts to move to
* other side of the environment through a narrow passage generated by four
* obstacles. There is a roadmap to guide the agents around the obstacles.
----------------------------------------------------------------------------- */

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <map>
#include <vector>

#ifdef _OPENMP
#include <omp.h>
#endif

#include "RVO.h"
#include "RVORoadmapRender.h"
#include "Clock.h"

#ifndef M_PI
const float M_PI = 3.14159265358979323846f;
#endif

class RoadmapVertex {
public:
	RVO::Vector2 position;
	std::vector<int> neighbors;
	std::vector<float> distToGoal;
};

/* Store the roadmap. */
std::vector<RoadmapVertex> roadmap;

/* Store the goals of the agents. */
std::vector<int> goals;
RVORender app;
/* Create a new simulator instance. */
RVO::RVOSimulator *sim = new RVO::RVOSimulator();
Clock clock3;
const int numAgent = 100;

void setupScenario(RVO::RVOSimulator *sim)
{
	/* Seed the random number generator. */
	std::srand(static_cast<unsigned int>(std::time(0)));

	/* Specify the global time step of the simulation. */
	sim->setTimeStep(0.25f);

	/*
	 * Add (polygonal) obstacles, specifying their vertices in counterclockwise
	 * order.
	 */
	std::vector<RVO::Vector2> obstacle1, obstacle2, obstacle3, obstacle4;

	obstacle1.push_back(RVO::Vector2(-10.0f, 40.0f));
	obstacle1.push_back(RVO::Vector2(-40.0f, 40.0f));
	obstacle1.push_back(RVO::Vector2(-40.0f, 10.0f));
	obstacle1.push_back(RVO::Vector2(-10.0f, 10.0f));

	obstacle2.push_back(RVO::Vector2(10.0f, 40.0f));
	obstacle2.push_back(RVO::Vector2(10.0f, 10.0f));
	obstacle2.push_back(RVO::Vector2(40.0f, 10.0f));
	obstacle2.push_back(RVO::Vector2(40.0f, 40.0f));

	obstacle3.push_back(RVO::Vector2(10.0f, -40.0f));
	obstacle3.push_back(RVO::Vector2(40.0f, -40.0f));
	obstacle3.push_back(RVO::Vector2(40.0f, -10.0f));
	obstacle3.push_back(RVO::Vector2(10.0f, -10.0f));

	obstacle4.push_back(RVO::Vector2(-10.0f, -40.0f));
	obstacle4.push_back(RVO::Vector2(-10.0f, -10.0f));
	obstacle4.push_back(RVO::Vector2(-40.0f, -10.0f));
	obstacle4.push_back(RVO::Vector2(-40.0f, -40.0f));

	sim->addObstacle(obstacle1);
	sim->addObstacle(obstacle2);
	sim->addObstacle(obstacle3);
	sim->addObstacle(obstacle4);

	/* Process the obstacles so that they are accounted for in the simulation. */
	sim->processObstacles();

	/* Add roadmap vertices. */
	RoadmapVertex v;

	/* Add the goal positions of agents. */
	v.position = RVO::Vector2(-75.0f, -75.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(75.0f, -75.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-75.0f, 75.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(75.0f, 75.0f);
	roadmap.push_back(v);

	/* Add roadmap vertices around the obstacles. */
	v.position = RVO::Vector2(-42.0f, -42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-42.0f, -8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-42.0f, 8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-42.0f, 42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-8.0f, -42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-8.0f, -8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-8.0f, 8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(-8.0f, 42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(8.0f, -42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(8.0f, -8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(8.0f, 8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(8.0f, 42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(42.0f, -42.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(42.0f, -8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(42.0f, 8.0f);
	roadmap.push_back(v);
	v.position = RVO::Vector2(42.0f, 42.0f);
	roadmap.push_back(v);

	/* Specify the default parameters for agents that are subsequently added. */
	sim->setAgentDefaults(15.0f, 10, 10.0f, 10.0f, 2.0f, 2.0f);

	/*
	 * Add agents, specifying their start position, and store goals on the
	 * opposite side of the environment (roadmap vertices).
	 */
	for (size_t i = 0; i < 5; ++i) {
		for (size_t j = 0; j < 5; ++j) {
			sim->addAgent(RVO::Vector2(55.0f + i * 10.0f,  55.0f + j * 10.0f));
			goals.push_back(0);

			sim->addAgent(RVO::Vector2(-55.0f - i * 10.0f,  55.0f + j * 10.0f));
			goals.push_back(1);

			sim->addAgent(RVO::Vector2(55.0f + i * 10.0f, -55.0f - j * 10.0f));
			goals.push_back(2);

			sim->addAgent(RVO::Vector2(-55.0f - i * 10.0f, -55.0f - j * 10.0f));
			goals.push_back(3);
		}
	}
}

void updateVisualization(RVO::RVOSimulator *sim)
{
	clock3.GetTotalElapsedTime();
	clock3.CalcTotalFPS();
	clock3.RecordRenderCounter();
	clock3.CalcRenderFPS();
	static WCHAR time[30];
	swprintf_s<30>(time, L"Simulation Time: %5.2f", clock3.TotalRealTime());
	static WCHAR totalfps[30];
	swprintf_s<30>(totalfps, L"Total FPS: %3.0f", clock3.TotalFPS());
	static WCHAR renderfps[30];
	swprintf_s<30>(renderfps, L"Render FPS: %3.0f", clock3.RenderFPS());
	static WCHAR updatefps[30];
	swprintf_s<30>(updatefps, L"Update FPS: %3.0f", clock3.UpdateFPS());

	static FLOAT dpiX, dpiY;
	app.m_pDirect2dFactory->GetDesktopDpi(&dpiX, &dpiY);
	app.m_pCompatibleRenderTarget->BeginDraw();
	app.m_pCompatibleRenderTarget->Clear(D2D1::ColorF(D2D1::ColorF::White));
	app.m_pCompatibleRenderTarget->SetTransform(D2D1::Matrix3x2F::Identity());
	/*
	for (int x = 0; x < wndWidth; x += 30)
	{
	app.m_pCompatibleRenderTarget->DrawLine(
	D2D1::Point2F(static_cast<FLOAT>(x), 0.0f),
	D2D1::Point2F(static_cast<FLOAT>(x), wndHeight),
	app.m_pLightSlateGrayBrush,
	1.0f
	);
	}

	for (int y = 0; y < wndHeight; y += 30)
	{
	app.m_pCompatibleRenderTarget->DrawLine(
	D2D1::Point2F(0.0f, static_cast<FLOAT>(y)),
	D2D1::Point2F(wndWidth, static_cast<FLOAT>(y)),
	app.m_pLightSlateGrayBrush,
	1.0f
	);
	}
	*/
	app.m_pCompatibleRenderTarget->DrawText(
		time,
		ARRAYSIZE(time) - 1,
		app.m_pTextFormat,
		D2D1::RectF(0, 0, wndWidth, wndHeight),
		app.m_pLightSlateGrayBrush
		);
	app.m_pCompatibleRenderTarget->DrawText(
		totalfps,
		ARRAYSIZE(totalfps) - 1,
		app.m_pTextFormat,
		D2D1::RectF(0, 20, wndWidth, wndHeight),
		app.m_pLightSlateGrayBrush
		);
	app.m_pCompatibleRenderTarget->DrawText(
		renderfps,
		ARRAYSIZE(renderfps) - 1,
		app.m_pTextFormat,
		D2D1::RectF(0, 40, wndWidth, wndHeight),
		app.m_pLightSlateGrayBrush
		);
	app.m_pCompatibleRenderTarget->DrawText(
		updatefps,
		ARRAYSIZE(updatefps) - 1,
		app.m_pTextFormat,
		D2D1::RectF(0, 60, wndWidth, wndHeight),
		app.m_pLightSlateGrayBrush
		);
	//physical pixel to dip
	app.m_pCompatibleRenderTarget->SetTransform(D2D1::Matrix3x2F::Translation(wndWidth / 2 * 96.f / dpiX, wndHeight / 2 * 96.f / dpiY));

	static ID2D1SolidColorBrush* brushArray[4] = { nullptr };
	app.m_pRenderTarget->CreateSolidColorBrush(
		D2D1::ColorF(D2D1::ColorF::LightSkyBlue),
		&brushArray[0]
		);
	app.m_pRenderTarget->CreateSolidColorBrush(
		D2D1::ColorF(D2D1::ColorF::Purple),
		&brushArray[1]
		);
	app.m_pRenderTarget->CreateSolidColorBrush(
		D2D1::ColorF(D2D1::ColorF::MediumVioletRed),
		&brushArray[2]
		);
	app.m_pRenderTarget->CreateSolidColorBrush(
		D2D1::ColorF(D2D1::ColorF::SeaGreen),
		&brushArray[3]
		);

	/* Output the current position of all the agents. */
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		D2D1_ELLIPSE ellipse = D2D1::Ellipse(
			D2D1::Point2F(sim->getAgentPosition(i).x(), sim->getAgentPosition(i).y()),
			2.0f,
			2.0f
			);
		if (0 == i % 4)
			app.m_pCompatibleRenderTarget->FillEllipse(ellipse, brushArray[0]/*app.m_pCornflowerBlueBrush*/);
		else if (1 == i % 4)
			app.m_pCompatibleRenderTarget->FillEllipse(ellipse, brushArray[1]/*app.m_pCornflowerBlueBrush*/);
		else if (2 == i % 4)
			app.m_pCompatibleRenderTarget->FillEllipse(ellipse, brushArray[2]/*app.m_pCornflowerBlueBrush*/);
		else if (3 == i % 4)
			app.m_pCompatibleRenderTarget->FillEllipse(ellipse, brushArray[3]/*app.m_pCornflowerBlueBrush*/);
	}

	//draw obstacles 
	static ID2D1SolidColorBrush* pBlackBrush = nullptr;

	app.m_pRenderTarget->CreateSolidColorBrush(
		D2D1::ColorF(D2D1::ColorF::Black),
		&pBlackBrush
		);
	//obstacle1
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-10, 40),
		D2D1::Point2F(-40, 40),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-40, 40),
		D2D1::Point2F(-40, 10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-40, 10),
		D2D1::Point2F(-10, 10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-10, 10),
		D2D1::Point2F(-10, 40),
		pBlackBrush,
		1.5f
		);
	//obstacle2
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(10, 40),
		D2D1::Point2F(10, 10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(10, 10),
		D2D1::Point2F(40, 10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(40, 10),
		D2D1::Point2F(40, 40),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(40, 40),
		D2D1::Point2F(10, 40),
		pBlackBrush,
		1.5f
		);
	//obstacle3
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(10, -40),
		D2D1::Point2F(40, -40),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(40, -40),
		D2D1::Point2F(40, -10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(40, -10),
		D2D1::Point2F(10, -10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(10, -10),
		D2D1::Point2F(10, -40),
		pBlackBrush,
		1.5f
		);
	//obstacle4
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-10, -40),
		D2D1::Point2F(-10, -10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-10, -10),
		D2D1::Point2F(-40, -10),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-40, -10),
		D2D1::Point2F(-40, -40),
		pBlackBrush,
		1.5f
		);
	app.m_pCompatibleRenderTarget->DrawLine(
		D2D1::Point2F(-40, -40),
		D2D1::Point2F(-10, -40),
		pBlackBrush,
		1.5f
		);
	//copy off-screen buffer to on-screen buffer
	D2D1_POINT_2U pt{ 0, 0 };
	D2D1_RECT_U rct{ 0, 0, wndWidth, wndHeight };
	app.m_pBitmap->CopyFromRenderTarget(&pt, app.m_pCompatibleRenderTarget, &rct);
	app.m_pCompatibleRenderTarget->EndDraw();
	app.m_pRenderTarget->BeginDraw();
	app.m_pRenderTarget->DrawBitmap(app.m_pBitmap);
	app.m_pRenderTarget->EndDraw();

	clock3.GetRenderElaspedTime();
}

void buildRoadmap(RVO::RVOSimulator *sim)
{
	/* Connect the roadmap vertices by edges if mutually visible. */
#ifdef _OPENMP
#pragma omp parallel for
#endif
	for (int i = 0; i < static_cast<int>(roadmap.size()); ++i) {
		for (int j = 0; j < static_cast<int>(roadmap.size()); ++j) {
			if (sim->queryVisibility(roadmap[i].position, roadmap[j].position, sim->getAgentRadius(0))) {
				roadmap[i].neighbors.push_back(j);
			}
		}

		/*
		 * Initialize the distance to each of the four goal vertices at infinity
		 * (9e9f).
		 */
		roadmap[i].distToGoal.resize(4, 9e9f);
	}

	/*
	 * Compute the distance to each of the four goals (the first four vertices)
	 * for all vertices using Dijkstra's algorithm.
	 */
#ifdef _OPENMP
#pragma omp parallel for
#endif
	for (int i = 0; i < 4; ++i) {
		std::multimap<float, int> Q;
		std::vector<std::multimap<float, int>::iterator> posInQ(roadmap.size(), Q.end());

		roadmap[i].distToGoal[i] = 0.0f;
		posInQ[i] = Q.insert(std::make_pair(0.0f, i));

		while (!Q.empty()) {
			const int u = Q.begin()->second;
			Q.erase(Q.begin());
			posInQ[u] = Q.end();

			for (int j = 0; j < static_cast<int>(roadmap[u].neighbors.size()); ++j) {
				const int v = roadmap[u].neighbors[j];
				const float dist_uv = RVO::abs(roadmap[v].position - roadmap[u].position);

				if (roadmap[v].distToGoal[i] > roadmap[u].distToGoal[i] + dist_uv) {
					roadmap[v].distToGoal[i] = roadmap[u].distToGoal[i] + dist_uv;

					if (posInQ[v] == Q.end()) {
						posInQ[v] = Q.insert(std::make_pair(roadmap[v].distToGoal[i], v));
					}
					else {
						Q.erase(posInQ[v]);
						posInQ[v] = Q.insert(std::make_pair(roadmap[v].distToGoal[i], v));
					}
				}
			}
		}
	}
}

void setPreferredVelocities(RVO::RVOSimulator *sim)
{
	/*
	 * Set the preferred velocity to be a vector of unit magnitude (speed) in the
	 * direction of the visible roadmap vertex that is on the shortest path to the
	 * goal.
	 */
#ifdef _OPENMP
#pragma omp parallel for
#endif
	for (int i = 0; i < static_cast<int>(sim->getNumAgents()); ++i) {
		float minDist = 9e9f;
		int minVertex = -1;

		for (int j = 0; j < static_cast<int>(roadmap.size()); ++j) {
			if (RVO::abs(roadmap[j].position - sim->getAgentPosition(i)) + roadmap[j].distToGoal[goals[i]] < minDist &&
				sim->queryVisibility(sim->getAgentPosition(i), roadmap[j].position, sim->getAgentRadius(i))) {

				minDist = RVO::abs(roadmap[j].position - sim->getAgentPosition(i)) + roadmap[j].distToGoal[goals[i]];
				minVertex = j;
			}
		}

		if (minVertex == -1) {
			/* No roadmap vertex is visible; should not happen. */
			sim->setAgentPrefVelocity(i, RVO::Vector2(0, 0));
		}
		else {
			if (RVO::absSq(roadmap[minVertex].position -
			               sim->getAgentPosition(i)) == 0.0f) {
				if (minVertex == goals[i]) {
					sim->setAgentPrefVelocity(i, RVO::Vector2());
				}
				else {
					sim->setAgentPrefVelocity(i, RVO::normalize(roadmap[goals[i]].position - sim->getAgentPosition(i)));
				}
			}
			else {
				sim->setAgentPrefVelocity(i, RVO::normalize(roadmap[minVertex].position - sim->getAgentPosition(i)));
			}
		}

		/*
		 * Perturb a little to avoid deadlocks due to perfect symmetry.
		 */
		float angle = std::rand() * 2.0f * M_PI / RAND_MAX;
		float dist = std::rand() * 0.0001f / RAND_MAX;

		sim->setAgentPrefVelocity(i, sim->getAgentPrefVelocity(i) +
		                          dist * RVO::Vector2(std::cos(angle), std::sin(angle)));
	}
}

bool reachedGoal(RVO::RVOSimulator *sim)
{
	/* Check if all agents have reached their goals. */
	for (size_t i = 0; i < sim->getNumAgents(); ++i) {
		if (RVO::absSq(sim->getAgentPosition(i) - roadmap[goals[i]].position) > 18.0f * 18.0f) {
			return false;
		}
	}

	return true;
}

// Provides the application entry point.
int WINAPI WinMain(
	HINSTANCE /* hInstance */,
	HINSTANCE /* hPrevInstance */,
	LPSTR /* lpCmdLine */,
	int /* nCmdShow */
	)
{
	HeapSetInformation(NULL, HeapEnableTerminationOnCorruption, NULL, 0);
	/* Set up the scenario. */
	setupScenario(sim);
	buildRoadmap(sim);

	if (SUCCEEDED(CoInitialize(NULL)))
	{
		if (SUCCEEDED(app.Initialize()))
		{
			MSG msg;
			while (msg.message != WM_QUIT)
			{
				if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
				{
					TranslateMessage(&msg);
					DispatchMessage(&msg);
				}
				else if (!reachedGoal(sim))
				{
					clock3.RecordUpdateCounter();
					clock3.CalcUpdateFPS();
					setPreferredVelocities(sim);
					sim->doStep();
					clock3.GetUpdateElaspedTime();
					updateVisualization(sim);
				}
			}
		}
		CoUninitialize();
	}

	delete sim;
	return 0;
}

